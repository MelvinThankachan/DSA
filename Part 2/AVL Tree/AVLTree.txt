In BST the average time complexity is O(log n). 
If the BST is not structured properly(unbalanced) then the time complexity might increase to log(n). 
So balancing tree is very important.
There is lot of self balancing trees. 
Self balancing trees are nothing but a BST, but it check the balance of the tree after insertion and deletion operations. If the tree is not balanced, then perform algorithms to balance the tree.
Because of the tree always maintained balanced and get maximum performance.
Popular self-balancing trees are:
    - AVL Tree
    - Red Black Tree
    - B Tree
    - Splay Tree
    - 2-3 Tree
    


AVL Tree

- AVL Tree is a special binary search tree which have self-balancing properties.
- When we insert or delete an element in tree we check the tree is balanced or not. if it is not balanced we balance it using rotation algorithms.
- There is mainly 4 rotation algorithms to balance the tree.
    - Left Rotation (LL) - If the imbalance on the left child's left subtree of the node, we perform LL rotation.
    - Right Rotation (RR) - If the imbalance on the right child's right subtree of the node, we perform RR rotation.
    - Left Right Rotation (LR) - If the imbalance on the left child's right subtree of the node, we perform LR rotation.
    - Right Left Rotation (RL) - If the imbalance on the right child's left subtree of the node, we perform LR rotation.